{"docstore/metadata": {"29f67843-20e7-41ae-8d2b-b61f069182db": {"doc_hash": "08f6965f7f98a34c57901c97f06f5b0970e6929ba1704f9df99fa412a018fd1b"}, "93f1facf-38ad-4dc1-bd7b-de690e2ae865": {"doc_hash": "dc366de6c62e286aef399226b5b95687f15b35df8ff15b2e574641385edc0ff6"}, "3e50b8b4-93aa-4d29-813a-d004f6f340e8": {"doc_hash": "7af1e9ac1aed45bdd003cfea4f941470a8c7915c026c4cc3da3f53fd7ec5d6dd"}, "99e241f3-b077-41e1-8a2c-f8a2dd8df45e": {"doc_hash": "29666b7303464c73cc6367171811c3b19dd1f842314f7bb00582b448c392ed0a"}, "bc9ed37e-6d39-42a9-a141-36483c0169ec": {"doc_hash": "dd3265a96272955e0c8ad0bc9c2deb8f5227716bc376572ccc2690e02d76e20b", "ref_doc_id": "29f67843-20e7-41ae-8d2b-b61f069182db"}, "97cd2ec7-7fa9-41c5-8d59-f931cf60e8e1": {"doc_hash": "a0686156d8fefd60986469cc27fde206ccdc643c10570e0dd3f006f1b4e18dae", "ref_doc_id": "93f1facf-38ad-4dc1-bd7b-de690e2ae865"}, "4df5a910-34d1-453f-a298-74d7c9cf94b4": {"doc_hash": "f0b6108180ab232092b9ce97940b180d1c67d5759dd68e43efcfd7b4a646a6f1", "ref_doc_id": "3e50b8b4-93aa-4d29-813a-d004f6f340e8"}, "334b59ab-7593-4f40-a077-d4b848af3bde": {"doc_hash": "2f890b27a75bbf9b4a0981657b97eb6f02b65bce05ebe37944fb48aa2350fd3f", "ref_doc_id": "99e241f3-b077-41e1-8a2c-f8a2dd8df45e"}}, "docstore/ref_doc_info": {"29f67843-20e7-41ae-8d2b-b61f069182db": {"node_ids": ["bc9ed37e-6d39-42a9-a141-36483c0169ec"], "metadata": {"file_path": "C:\\Users\\HP\\OneDrive\\Desktop\\ML_Project\\src\\__init__.py", "file_name": "__init__.py", "file_type": "text/x-python", "file_size": 0, "creation_date": "2025-08-22", "last_modified_date": "2025-08-22"}}, "93f1facf-38ad-4dc1-bd7b-de690e2ae865": {"node_ids": ["97cd2ec7-7fa9-41c5-8d59-f931cf60e8e1"], "metadata": {"file_path": "C:\\Users\\HP\\OneDrive\\Desktop\\ML_Project\\src\\exception.py", "file_name": "exception.py", "file_type": "text/x-python", "file_size": 1500, "creation_date": "2025-08-22", "last_modified_date": "2025-08-23"}}, "3e50b8b4-93aa-4d29-813a-d004f6f340e8": {"node_ids": ["4df5a910-34d1-453f-a298-74d7c9cf94b4"], "metadata": {"file_path": "C:\\Users\\HP\\OneDrive\\Desktop\\ML_Project\\src\\logger.py", "file_name": "logger.py", "file_type": "text/x-python", "file_size": 1527, "creation_date": "2025-08-22", "last_modified_date": "2025-08-23"}}, "99e241f3-b077-41e1-8a2c-f8a2dd8df45e": {"node_ids": ["334b59ab-7593-4f40-a077-d4b848af3bde"], "metadata": {"file_path": "C:\\Users\\HP\\OneDrive\\Desktop\\ML_Project\\src\\utils.py", "file_name": "utils.py", "file_type": "text/x-python", "file_size": 102, "creation_date": "2025-08-22", "last_modified_date": "2025-08-22"}}}, "docstore/data": {"bc9ed37e-6d39-42a9-a141-36483c0169ec": {"__data__": {"id_": "bc9ed37e-6d39-42a9-a141-36483c0169ec", "embedding": null, "metadata": {"file_path": "C:\\Users\\HP\\OneDrive\\Desktop\\ML_Project\\src\\__init__.py", "file_name": "__init__.py", "file_type": "text/x-python", "file_size": 0, "creation_date": "2025-08-22", "last_modified_date": "2025-08-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "29f67843-20e7-41ae-8d2b-b61f069182db", "node_type": "4", "metadata": {"file_path": "C:\\Users\\HP\\OneDrive\\Desktop\\ML_Project\\src\\__init__.py", "file_name": "__init__.py", "file_type": "text/x-python", "file_size": 0, "creation_date": "2025-08-22", "last_modified_date": "2025-08-22"}, "hash": "08f6965f7f98a34c57901c97f06f5b0970e6929ba1704f9df99fa412a018fd1b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 0, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "97cd2ec7-7fa9-41c5-8d59-f931cf60e8e1": {"__data__": {"id_": "97cd2ec7-7fa9-41c5-8d59-f931cf60e8e1", "embedding": null, "metadata": {"file_path": "C:\\Users\\HP\\OneDrive\\Desktop\\ML_Project\\src\\exception.py", "file_name": "exception.py", "file_type": "text/x-python", "file_size": 1500, "creation_date": "2025-08-22", "last_modified_date": "2025-08-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "93f1facf-38ad-4dc1-bd7b-de690e2ae865", "node_type": "4", "metadata": {"file_path": "C:\\Users\\HP\\OneDrive\\Desktop\\ML_Project\\src\\exception.py", "file_name": "exception.py", "file_type": "text/x-python", "file_size": 1500, "creation_date": "2025-08-22", "last_modified_date": "2025-08-23"}, "hash": "dc366de6c62e286aef399226b5b95687f15b35df8ff15b2e574641385edc0ff6", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "import traceback   # Used to extract detailed stack trace information\r\nimport sys         # Gives access to system-specific parameters and functions (like current exception info)\r\n\r\n# Custom exception class that extends Python's built-in Exception class\r\nclass CustomException(Exception):\r\n\r\n    # Constructor method for initializing the custom exception\r\n    def __init__(self, error_message, error_detail: sys):\r\n        super().__init__(error_message)  # Call the base Exception constructor\r\n        # Create a detailed error message using the static method below\r\n        self.error_message = self.get_detailed_error_message(error_message, error_detail)\r\n\r\n    # Static method to build a detailed error message with file name & line number\r\n    @staticmethod\r\n    def get_detailed_error_message(error_message, error_detail: sys):\r\n        \r\n        # Get the traceback object from the current exception\r\n        _, _, exc_tb = sys.exc_info()\r\n\r\n        # Extract the file name where the exception occurred\r\n        file_name = exc_tb.tb_frame.f_code.co_filename\r\n\r\n        # Extract the line number where the exception occurred\r\n        line_number = exc_tb.tb_lineno\r\n\r\n        # Return a formatted error string with file name, line number, and the message\r\n        return f\"Error in {file_name} , line {line_number} : {error_message}\"\r\n    \r\n    # When the exception object is converted to string, return the detailed error message\r\n    def __str__(self):\r\n        return self.error_message", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1498, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4df5a910-34d1-453f-a298-74d7c9cf94b4": {"__data__": {"id_": "4df5a910-34d1-453f-a298-74d7c9cf94b4", "embedding": null, "metadata": {"file_path": "C:\\Users\\HP\\OneDrive\\Desktop\\ML_Project\\src\\logger.py", "file_name": "logger.py", "file_type": "text/x-python", "file_size": 1527, "creation_date": "2025-08-22", "last_modified_date": "2025-08-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3e50b8b4-93aa-4d29-813a-d004f6f340e8", "node_type": "4", "metadata": {"file_path": "C:\\Users\\HP\\OneDrive\\Desktop\\ML_Project\\src\\logger.py", "file_name": "logger.py", "file_type": "text/x-python", "file_size": 1527, "creation_date": "2025-08-22", "last_modified_date": "2025-08-23"}, "hash": "7af1e9ac1aed45bdd003cfea4f941470a8c7915c026c4cc3da3f53fd7ec5d6dd", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "\"\"\"For logging execution and errors\"\"\"\r\n# Import Python's built-in logging module\r\nimport logging\r\n# Import os module for file path operations (like creating log directory)\r\nimport os\r\n# Import datetime module for timestamping log files\r\nfrom datetime import datetime\r\n\r\n\r\n#Name of the log folder where logs will be stored\r\nLOG_DIR = \"logs\"\r\n#create log folder if it doesn't exist\r\nos.makedirs(LOG_DIR, exist_ok=True)\r\n\r\n\r\n\r\n# Build log file name with current date and time like : logs/log_2023-10-05_14-30-00.log(changes Daily )\r\nLOG_FILE = os.path.join(\r\n    LOG_DIR,\r\n    f\"log_{datetime.now().strftime('%Y-%m-%d')}.log\")\r\n\r\n#Configure the ROOT logger once for whole application\r\nlogging.basicConfig(\r\n    #Write all logs to this file\r\n    filename=LOG_FILE,\r\n    #Log message format:\r\n    #   - %(asctime)s: Timestamp of the log entry\r\n    #   - %(levelname)s: Log level (DEBUG, INFO, WARNING, ERROR, CRITICAL)\r\n    #   - %(message)s: The actual log message\r\n    format=\"[%(asctime)s] %(levelname)s - %(message)s\",\r\n    # Minumum log level to record (INFO)\r\n    level=logging.INFO\r\n)\r\n\r\n\r\ndef get_logger(name) :\r\n    \"\"\"\r\n    Returns a named logger that inherits the root configuration above.\r\n    Use different names for different modules to differentiate log sources.\r\n    \"\"\"\r\n    # Get (or create) a logger with the specified name\r\n    logger = logging.getLogger(name)\r\n    #Ensure this logger emits INFO and above messages\r\n    logger.setLevel(logging.INFO)\r\n    # Return the configured logger\r\n    return logger", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1521, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "334b59ab-7593-4f40-a077-d4b848af3bde": {"__data__": {"id_": "334b59ab-7593-4f40-a077-d4b848af3bde", "embedding": null, "metadata": {"file_path": "C:\\Users\\HP\\OneDrive\\Desktop\\ML_Project\\src\\utils.py", "file_name": "utils.py", "file_type": "text/x-python", "file_size": 102, "creation_date": "2025-08-22", "last_modified_date": "2025-08-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "99e241f3-b077-41e1-8a2c-f8a2dd8df45e", "node_type": "4", "metadata": {"file_path": "C:\\Users\\HP\\OneDrive\\Desktop\\ML_Project\\src\\utils.py", "file_name": "utils.py", "file_type": "text/x-python", "file_size": 102, "creation_date": "2025-08-22", "last_modified_date": "2025-08-22"}, "hash": "29666b7303464c73cc6367171811c3b19dd1f842314f7bb00582b448c392ed0a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "\"\"\" For common functions across the project , such as data base connections or  saving models, etc.\"\"\"", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 102, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}}}